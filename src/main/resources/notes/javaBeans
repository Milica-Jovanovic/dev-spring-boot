In the Spring Framework, a "bean" refers to an object that is instantiated and managed by the Spring IoC (Inversion of Control) container.

By default, when our application starts, all beans are initialized.
Spring will create an instance of each and make them available.

Instead we can use Lazy Initialization with annotation @Lazy and bean will be initialized in the following cases:
    - it is needed for dependency injection
    - or it is explicitly requested

If @Lazy is used in the class and that class is not called to be used anywhere, then it's not initialized at start

If we have multiple classes and we want to apply @Lazy in each class, instead of doing it individually we can setup global configuration

To setup Lazy Initialization Global Configuration we can set it up in application.properties:
    spring.main.lazy-initialization=true
By setting this up, all beans are lazy, no beans are created until needed, including our DemoController.
After setting it up, this is what will happen when we access "/dailyworkout" rest endpoint:
    - Spring will determine dependencies for DemoController
    - For dependency resolution, Spring will create instance of TennisCoach first
    - Then it will create instance of DemoController and inject the TennisCoach

######################## BEAN SCOPE #########################

The default bean scope is singleton (one instance of the bean)
One single item is created in the memory and it's shared among other items

We can also explicitly specify bean scope: @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
Spring Bean Scopes:
    - Singleton
    - Prototype (creates a new bean instance for each container request)
    - Request (for HTTP web request)
    - Session (for HTTP web session)
    - Application (for web app ServletContext)
    - Websocket (for a web socket)

To check is the scope singleton or prototype:
    @GetMapping("/check")
    public String check() {
        return "Comparing beans: myCoach == anotherCoach, " + (myCoach == anotherCoach);
    }
it will return "true" if it's singleton, and "false" if it's prototype

