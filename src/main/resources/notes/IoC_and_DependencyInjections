Inversion of control is the approach of outsourcing the construction and management of objects


Spring container (Object Factory) has two primary functions:
1) Create and manage objects (Inversion of Control)
2) Inject object dependency (Dependency Injection)

To configure Spring Container there are different ways:
- XML configuration file (legacy)
- Java Annotations (modern)
- Java Source Code (modern)

Dependency injection
Inject an object dependency into Controller

There are multiple types of injection with Spring but these two are  recommended:
1) Constructor Injection
2) Setter Injection


Spring AutoWiring
For dependency injection Spring can use autowiring

Spring will look for a class that matches by type (class or interface), and the it will automatically inject, this is autowiring

################ MY OWN WORDS ##################

- We have interfaces with abstract methods

- Then we have classes that are implementing those interfaces and mandatory overriding abstract methods
  Those classes have in Spring have an annotation @Component

- Controller class in their definition always has @RestController annotation
  In Controller we use annotation @Autowired in the constructor or setter definition that will communicate with annotations @Component to find matching type and inject them
  Also in Controller we have annotations @GetMapping that are methods that are returning our endpoints

  What's happening behind the scene in Constructor dependency injection:
    - we only see private Coach theCoach field declared and @Autowired annotation in the constructor that uses theCoach instance
    - behind the scene are happening a new Coach object, and a new Controller object that uses theCoach instance in constructor:
         Coach theCoach = new CricketCoach();
         DemoController demoController = new DemoController(theCoach);

  What's happening behind the scene in Setter dependency injection:
    - we only see private Coach theCoach field declared and @Autowired annotation in the setter that uses theCoach instance
    - behind the scene are happening a new Coach object, and a new Controller object that uses theCoach instance with setter
         Coach theCoach = new CricketCoach();
         DemoController demoController = new DemoController(theCoach);
         demoController.setCoach(theCoach);
    - setter method can be named with any method name, doesn't have to be setSomething... it can be doSomething...

################################################

@Component annotation marks the class as a Spring Bean, which makes it a candidate for a dependency injection

A Spring Bean is just a regular Java class that is managed by Spring

############# WHICH DEPENDENCY TO USE? #################

Constructor Injection:
    - when we have required dependencies
    - it is recommended by spring.io as first choice

Setter Injection:
    - when we have optional dependencies
    - if dependency is not provided then we have a default logic

Field Injections:
    - not recommended in recent years
    - makes the code harder to unit test
    - used on legacy projects
    - example:
        @Autowired
        private Coach myCoach;
        // no need for constructors or setters

##############################################

@Qualifier annotation is used in constructor or setter when we have multiple classes that are matching so we specify which one
@Primary is used to make one class primary, but if we have a both in controller @Qualifier and @Primary, then @Qualifier has priority
Recommendation is to use @Qualifier because it's specific and has priority anyway

##############################################
        Configuring Beans with Java Code

- Create @Configuration class
- Define @bean method to configure the bean
- Inject the bean into our controller

@Bean annotation is useful when we want to use a third-part class to a Spring framework, as a Spring Bean
We won't have acess to the source code of third-party class, but we ca use it as a Spring Bean
An example is AWS S3 service that we want to use the AWS S3 client as a Spring bean in our application
Our code will communicate with a cloud and store/retrieve documents...
The AWS S3 client is part of AWS SDK so we can't modify the AWS SDK source code, we can't add @Component annotation to their code
But we can configure it as a Spring Bean using @Bean annotation, example:

@Configuration
public class DocumentConfig {

    @Bean
    public S2Client remoteClient() {

        // Create an S3 client to connect to AWS S3
        ProfileCredentialsProvider credentialsProvider = ProfileCredentialsProvider.create();
        Region region = Region.US_EAST_1;
        S3Client s3Client = S3Client.builder()
                .region(region)
                .credentialsProvider(credentialsProvider)
                .build();

        return s3Client;
    }
}

Once S3 client becomes a Spring bean we can use it in another part of our application
It's ready to be injected as a bean

@Component
public class DocumentsService {

    private S3Client s3Client;

    @Autowired
    public DocumentsService(S3Client theS3Client) {
        s3Client = theS3Client;
    }


    public void processDocument(Document theDocument) {

        // get the document input stream and file size

        // Store document in AWS S3
        // Create a put request for the object
        PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                .bucket(bucketName)
                .key(subDirectory)
                .acl(ObjectCannedACL.BUCKET_OWNER_FULL_CONTROL).build();

        // perform the putObject operation to AWS S3 ... using our autowired bean
        s3Client.putObject(putObjectRequest, RequestBody.fromInputStream(fileInputStream, contentLength));
    }
}

We make a third-party class available to Spring framework by using annotation @Bean